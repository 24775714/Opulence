HAS PRIORITY:
    Get rid of dependence on HTTP Request in Credential stuff
    Finish form stuff


    Allow caching of routes/matches
        Compiler needs to store parsed routes
        Router needs to check if cached routes exist
            If not, loop through ALL routes, parse them, cache them
            If so, loop through cached routes and compile them to match them
    Idea:  Run statement compiler
        Cache results
        Run all other subcompilers
        Cache results
        Next time the template needs to be rendered, look it up in cache
            If it's there, grab it, then check if it is also in cache with the input tags/vars

        ** WOULD NEED TO INHERIT VARS/TAGS/PARTS FROM PARENTS AFTER TEMPLATE IS PARSED
            If we do this inside the Statement subcompiler, we couldn't handle the case when {{username}} was set in a builder for the parent template
                The cached template would always use the inherited tags/vars/parts from the template in cache, which is not at all what we want
            So, we'd need to parse the statements and keep track of the inheritance stack somewhere
                This would also involve running builders AFTER template has been parsed
            Is all this really worth it?
    Add ability to start a section and show it
        Basically, allows us to define a section and give it default content

Need to create session storage classes
    Need SessionWriter/Reader class (should be a single class)
        Probably instantiated in a bootstrapper
        Where do we register the task to write the session data on application shutdown?
    Need to think of how to assign session Ids
    For cache-backed sessions, maybe it's best to have a simple ICache for Redis and Memcached to implement
        This would only include the basics: get(), set(), and delete()
Do we really need repo interface examples in RDev?
    No.  As soon as above items are done, move repo stuff to Project.
Incorrect username entry is faster, allowing timing attacks
Need to figure out where to store lifetime settings for login credentials in LoginController